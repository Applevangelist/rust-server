syntax = "proto3";

package dcs;

/**
 * The category the object belongs to
 *
 * All DCS objects are one of the following categories. DCS itself does not use the UNKNOWN enum value but we use it
 * in GRPC as a fallback in case of issues determining the category.
 *
 * See https://wiki.hoggitworld.com/view/DCS_Class_Object for more information
 */
enum ObjectCategory {
  UNKNOWN = 0;
  UNIT = 1;
  WEAPON = 2;
  STATIC = 3;
  SCENERY = 4;
  BASE = 5;
  CARGO = 6;
}

/**
 * The category the object belongs to
 *
 * Some of these are less than obvious. For example an oilrig counts as a HELIPAD airfield.
 */
enum AirbaseCategory {
  AIRDROME = 0;
  HELIPAD = 1;
  SHIP = 2;
}

/**
 * Coalitions in DCS
 *
 * The coalitions supported by DCS. The NEUTRAL coalition is a relatively new one and may not be as supported as 
 * the belligerant ones.
 */
enum Coalition {
  NEUTRAL = 0;
  RED = 1;
  BLUE = 2;
}

/**
  * Countries in DCS
  *
  * Every country belongs to a coalition and this association is set per mission. The values of these enums are
  * correct such that they will work with DCS however the text names have been Made CamelCase to aid in language
  * bindings and acronyms have been replaced with their full english names to aid in recognition. In some cases
  * this can be a big change (e.g. USSR -> Soviet Union).
  *
  * We have also added a dummy value for the missing enum value 14 to prevent possible issues in the various
  * language bindings
  *
  * See https://wiki.hoggitworld.com/view/DCS_enum_country for more information
  */
enum Country {
	Russia = 0;
	Ukraine = 1;
	UnitedStatesOfAmerica = 2;
	Turkey = 3;
	UnitedKingdom = 4;
	France = 5;
	Germany = 6;
	Aggressors = 7;
	Canada = 8;
	Spain = 9;
	TheNetherlands = 10;
	Belgium = 11;
	Norway = 12;
	Denmark = 13;
	DoNotUse = 14;
	Israel = 15;
	Georgia = 16;
	Insurgents = 17;
	Abkhazia = 18;
	SouthOsetia = 19;
	Italy = 20;
	Australia = 21;
	Switzerland = 22;
	Austria = 23;
	Belarus = 24;
	Bulgaria = 25;
	CzechRepublic = 26;
	China = 27;
	Croatia = 28;
	Egypt = 29;
	Finland = 30;
	Greece = 31;
	Hungary = 32;
	India = 33;
	Iran = 34;
	Iraq = 35;
	Japan = 36;
	Kazakhstan = 37;
	NorthKorea = 38;
	Pakistan = 39;
	Poland = 40;
	Romania = 41;
	SaudiArabia = 42;
	Serbia = 43;
	Slovakia = 44;
	SouthKorea = 45;
	Sweden = 46;
	Syria = 47;
	Yemen = 48;
	Vietnam = 49;
	Venezuela = 50;
	Tunisia = 51;
	Thailand = 52;
	Sudan = 53;
	Philippines = 54;
	Morocco = 55;
	Mexico = 56;
	Malaysia = 57;
	Libya = 58;
	Jordan = 59;
	Indonesia = 60;
	Honduras = 61;
	Ethiopia = 62;
	Chile = 63;
	Brazil = 64;
	Bahrain = 65;
	ThirdReich = 66;
	Yugoslavia = 67;
	SovietUnion = 68;
	ItalianSocialRepublic = 69;
	Algeria = 70;
	Kuwait = 71;
	Qatar = 72;
	Oman = 73;
	UnitedArabEmirates = 74;
	SouthAfrica = 75;
	Cuba = 76;
	Portugal = 77;
	GermanDemocraticRepublic = 78;
	Lebanon = 79;
	CombinedJointTaskForceBlue = 80;
	CombinedJointTaskForceRed = 81;
	UnitedNationsPeacekeepers = 82;
	Argentina = 83;
	Cyprus = 84;
	Slovenia = 85;
}

/**
 * A generic empty response
 *
 * A generic empty response used in APIs that do not return any values to the client
 */
message EmptyResponse {}

/**
 * Position of an object in DCS
 *
 * Latitude and Longitude are in Decimal Degrees format (e.g. 41.33 / 37.21). Negative values are used for West of the
 * meridian and south of the equator
 *
 * Altitude is given in meters above Mean Sea Level (MSL) and can be a decimal value.
 */
message Position {
  // Latitude in Decimal Degrees format
  double lat = 1;
  // Longitude in Decimal Degrees format
  double lon = 2;
  // Altitude in Meters above Mean Sea Level (MSL)
  double alt = 3; 
}

/**
 * This type is returned if an object category cannot be determined
 *
 * The base object includes the `getName()` function so even for an unknown type we _should_ be able to get the name
 */
message Unknown {
  string name = 1;
}

/**
 * An instance of a DCS Unit
 *
 * A unit is an "active" unit in a DCS mission. This means it has an attached AI that moves and shoots. Units include
 * aircraft, ground units, ships, weapons etc.
 */
message Unit {
  uint32 id = 1; // The DCS generated ID
  string name = 2; // The name of the unit as assigned in the mission editor
  string callsign = 3; // The DCS assigned callsign if one exists. e.g. "Enfield 11"
  Coalition coalition = 4; // The coalition the unit belongs to
  string type = 5; // The DCS type-name of the unit. e.g "MiG-29A", "ZSU_57_2" or "Hawk ln"
  Position position = 6; // The position of the unit
  optional string player_name = 7; // The name of the player if one is in control of the unit
  string group_name = 8; // The name of the group that the unit belongs to
  uint32 number_in_group = 9; // The number of this unit in the group. Does not change as units are destroyed
  double speed = 10; // The horizontal speed of the unit. If it is doing mach one straight up then the speed will be 0
  double heading = 11; // The heading of the unit
}

/**
 * An instance of a DCS group
 */
message Group {
  uint32 id = 1; // The DCS generated ID
  string name = 2; // The name of the group as assigned in the mission editor
}

/**
 * An instance of a DCS weapon
 *
 * These weapons include everything from autocannon HE shells up to massive ship-killer missiles
 */
message Weapon {
	uint32 id = 1; // The DCS generated ID
	string type = 2; // The DCS type-name of the weapon. e.g "Matra_S530D", "HAWK_RAKETA" or "weapons.shells.53-UOR-281U"
	Position position = 3;  // The position of the Weapon
}

/**
 * An instance of a DCS static object
 *
 * These objects are often buildings but can also be vehicles that have no AI or other game behaviour aside from 
 * being destroyable
 */
message Static {
}

/**
 * An instance of a DCS scenery object
 */
message Scenery {
}

/**
 * An instance of a DCS Airfield
 *
 */
message Airbase {
  optional uint32 id = 1; // The DCS generated ID. Only used when the airfield is also a unit (e.g. an Aicraft Carrier)
  string name = 2; // TODO: Fill this in
  string callsign = 3; // TODO: Fill this in
  Coalition coalition = 4; // The coalition the unit belongs to. This can change mid-mission if an airfield is captured
  Position position = 6; // The position of the center point of the airfield.
  AirbaseCategory category = 7; // What category the airfield belongs to.
  string display_name = 8; // TODO: Fill this in
}

/**
 * An instance of a DCS Cargo object
 */
message Cargo {
}

/*
 * The initiator of an event
 *
 * The initiator of an event. For things like shooting events it is usually a vehicle but it can be almost anything
 * depending on the event
 */
message Initiator {
	oneof initiator {
		Unknown unknown = 1;
		Unit unit = 2;
		Weapon weapon = 3;
		Static static = 4;
		Scenery scenery = 5;
		Airbase airbase = 6;
		Cargo cargo = 7;
	}
}

/*
 * The target of an event
 *
 * The target of an event. For things like shooting events it is usually a vehicle but it can be almost anything
 * depending on the event
 */
message Target {
  oneof target {
    Unknown unknown = 1;
    Unit unit = 2;
    Weapon weapon = 3;
    Static static = 4;
    Scenery scenery = 5;
    Airbase airbase = 6;
    Cargo cargo = 7;
  }
}

/*
 * A MarkPanel
 *
 * A MarkPanel visible on the F10 map. These can be used for reference by players but can also be used by things
 * like Jester for setting waypoints
 */
message MarkPanel {
	uint32 id = 1; 
	double time = 2; // I have no idea what this time value means
	Unit initiator = 3;
	optional Coalition coalition = 4;
	optional uint32 group_id = 5;
	optional string text = 6;
	Position position = 7;
}
