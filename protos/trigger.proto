syntax = "proto3";

import "common.proto";

package dcs.trigger;

// https://wiki.hoggitworld.com/view/DCS_singleton_trigger
service TriggerService {
  // https://wiki.hoggitworld.com/view/DCS_func_outText
  rpc OutText(OutTextRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_outTextForCoalition
  rpc OutTextForCoalition(OutTextForCoalitionRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_outTextForGroup
  rpc OutTextForGroup(OutTextForGroupRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_getUserFlag
  rpc GetUserFlag(GetUserFlagRequest) returns (GetUserFlagResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_setUserFlag
  rpc SetUserFlag(SetUserFlagRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToAll
  rpc MarkToAll(MarkToAllRequest) returns (MarkToAllResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToCoalition
  rpc MarkToCoalition(MarkToCoalitionRequest) returns (MarkToCoalitionResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_markToGroup
  rpc MarkToGroup(MarkToGroupRequest) returns (MarkToGroupResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_removeMark
  rpc RemoveMark(RemoveMarkRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_explosion
  rpc Explosion(ExplosionRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_smoke
  rpc Smoke(SmokeRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_illuminationBomb
  rpc IlluminationBomb(IlluminationBombRequest) returns (dcs.EmptyResponse) {}

  // https://wiki.hoggitworld.com/view/DCS_func_signalFlare
  rpc SignalFlare(SignalFlareRequest) returns (dcs.EmptyResponse) {}
}

message OutTextRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
}

message OutTextForCoalitionRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
  dcs.Coalition coalition = 4;
}

message OutTextForGroupRequest {
  string text = 1;
  int32 display_time = 2;
  bool clear_view = 3;
  uint32 groupId = 4;
}

message GetUserFlagRequest {
  string flag = 1;
}

message GetUserFlagResponse {
  uint32 value = 1;
}

message SetUserFlagRequest {
  string flag = 1;
  uint32 value = 2;
}

message MarkToAllRequest {
  string text = 2;
  dcs.Position position = 3;
  bool read_only = 4;
  string message = 5;
}

message MarkToAllResponse {
  uint32 id = 1;
}

message MarkToCoalitionRequest {
  uint32 id = 1;
  string text = 2;
  dcs.Position position = 3;
  dcs.Coalition coalition = 4;
  bool readOnly = 5;
  string message = 6;
}

message MarkToCoalitionResponse {
  uint32 id = 1;
}

message MarkToGroupRequest {
  uint32 id = 1;
  string text = 2;
  dcs.Position position = 3;
  uint32 group_id = 4;
  bool read_only = 5;
  string message = 6;
}

message MarkToGroupResponse {
  uint32 id = 1;
}

message RemoveMarkRequest {
  uint32 id = 1;
}

message ExplosionRequest {
  dcs.Position position = 1;
  uint32 power = 2;
}

message SmokeRequest {
  // Putting this inside the request because we cannot
  // have the same enum value in the same package.
  enum SmokeColor {
    GREEN = 0;
    RED = 1;
    WHITE = 2;
    ORANGE = 3;
    BLUE = 4;
  }

  // Altitude paramter will be ignored. Smoke always eminated from ground
  // level which will be calculated server-side
  dcs.Position position = 1;
  SmokeColor color = 2;
}

message IlluminationBombRequest {
  // The altitude of Illumination Bombs is meters above ground. Ground level
  // will be calculated server-side
  dcs.Position position = 1;
  uint32 power = 2;
}

message SignalFlareRequest {
  // Putting this inside the request because we cannot
  // have the same enum value in the same package.
  enum FlareColor {
    GREEN = 0;
    RED = 1;
    WHITE = 2;
    YELLOW = 3;
  }

  // Altitude paramter will be ignored. Signal flares always fire from
  // ground level which will be calculated server-side
  dcs.Position position = 1;
  FlareColor color = 2;
  uint32 azimuth = 3;
}